name: AutoBatcher
env:
  solutionFile: 'S3.AutoBatcher.sln'
on:
  push:
    branches: [  'releases/**' ]
  pull_request:
    branches: [  'releases/**' ]

jobs:
  deploy:

    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2
    
    - name: Fetch tags and master for GitVersion
      run: |
         git fetch --tags --unshallow

    
    - name: GitVersion
      id: gitversion  # step id used as reference for output values
      uses: roryprimrose/rungitversion@v1
    
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.101
    
    - name: Output values
      run: |
        echo "Run ID: ${{ github.run_id }}""
        echo "Output Run Number: ${{ github.run_number }}"" 
        echo "Major: ${{ steps.gitversion.outputs.Major }}"
        echo "Minor: ${{ steps.gitversion.outputs.Minor }}"
        echo "Patch: ${{ steps.gitversion.outputs.Patch }}"
        echo "PreReleaseTag: ${{ steps.gitversion.outputs.PreReleaseTag }}"
        echo "PreReleaseTagWithDash: ${{ steps.gitversion.outputs.PreReleaseTagWithDash }}"
        echo "PreReleaseLabel: ${{ steps.gitversion.outputs.PreReleaseLabel }}"
        echo "PreReleaseNumber: ${{ steps.gitversion.outputs.PreReleaseNumber }}"
        echo "WeightedPreReleaseNumber: ${{ steps.gitversion.outputs.WeightedPreReleaseNumber }}"
        echo "BuildMetaData: ${{ steps.gitversion.outputs.BuildMetaData }}"
        echo "BuildMetaDataPadded: ${{ steps.gitversion.outputs.BuildMetaDataPadded }}"
        echo "FullBuildMetaData: ${{ steps.gitversion.outputs.FullBuildMetaData }}"
        echo "MajorMinorPatch: ${{ steps.gitversion.outputs.MajorMinorPatch }}"
        echo "SemVer: ${{ steps.gitversion.outputs.SemVer }}"
        echo "LegacySemVer: ${{ steps.gitversion.outputs.LegacySemVer }}"
        echo "LegacySemVerPadded: ${{ steps.gitversion.outputs.LegacySemVerPadded }}"
        echo "AssemblySemVer: ${{ steps.gitversion.outputs.AssemblySemVer }}"
        echo "AssemblySemFileVer: ${{ steps.gitversion.outputs.AssemblySemFileVer }}"
        echo "FullSemVer: ${{ steps.gitversion.outputs.FullSemVer }}"
        echo "InformationalVersion: ${{ steps.gitversion.outputs.InformationalVersion }}"
        echo "BranchName: ${{ steps.gitversion.outputs.BranchName }}"
        echo "Sha: ${{ steps.gitversion.outputs.Sha }}"
        echo "ShortSha: ${{ steps.gitversion.outputs.ShortSha }}"
        echo "NuGetVersionV2: ${{ steps.gitversion.outputs.NuGetVersionV2 }}"
        echo "NuGetVersion: ${{ steps.gitversion.outputs.NuGetVersion }}"
        echo "NuGetPreReleaseTagV2: ${{ steps.gitversion.outputs.NuGetPreReleaseTagV2 }}"
        echo "NuGetPreReleaseTag: ${{ steps.gitversion.outputs.NuGetPreReleaseTag }}"
        echo "VersionSourceSha: ${{ steps.gitversion.outputs.VersionSourceSha }}"
        echo "CommitsSinceVersionSource: ${{ steps.gitversion.outputs.CommitsSinceVersionSource }}"
        echo "CommitsSinceVersionSourcePadded: ${{ steps.gitversion.outputs.CommitsSinceVersionSourcePadded }}"
        echo "CommitDate: ${{ steps.gitversion.outputs.CommitDate }}"
    
    - name: Update project version
      uses: roryprimrose/set-vs-sdk-project-version@v1
      with:
        version: "${{steps.gitversion.outputs.Major}}.${{steps.gitversion.outputs.Minor}}.${{steps.gitversion.outputs.BuildMetaData}}"
        assemblyVersion: "${{steps.gitversion.outputs.Major}}.${{steps.gitversion.outputs.Minor}}.${{steps.gitversion.outputs.BuildMetaData}}.0"
        fileVersion: "${{steps.gitversion.outputs.Major}}.${{steps.gitversion.outputs.Minor}}.${{steps.gitversion.outputs.BuildMetaData}}"

    - name: Install dependencies
      run: dotnet restore ${{env.solutionFile}}
      working-directory: ./src
    
    - name: Build
      run: dotnet build ${{env.solutionFile}} --configuration Release --no-restore
      working-directory: ./src
   
    - name: Test
      run: dotnet test ${{env.solutionFile}} --no-restore --configuration Release --verbosity normal
      working-directory: ./src
   
    - name: Generate nuget package
      run: dotnet pack S3.AutoBatcher.csproj --configuration Release -o nupkg
      working-directory: ./src/S3.AutoBatcher
   
    - name: Publish nuget package
      run: find . -name S3.AutoBatcher.*.nupkg -type f -print0 | xargs -0 -I pkg dotnet nuget push pkg -k $nuget_api_key -s "https://api.nuget.org/v3/index.json" --skip-duplicate
      env:
        nuget_api_key: ${{ secrets.NUGET_API_KEY }}
      working-directory: ./src/S3.AutoBatcher/nupkg